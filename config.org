#+title: My Emacs configuration

In the ~~/.emacs.d/init.el~ file, all of the customizations added via the Emacs GUI (or Custom) is under =custom-set-variables= and =custom-set-faces=. Everything else will go under this org file to have a more thorough documentation.

*Very helpful* shortcut while in /any/ mode is =C-h b=, which shows all of the keybindings in the current mode. Explore this if you're just learning to get familiar with various keybindings and discover new functions.

* Basic settings

Initialize package management and use =use-package=.
#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)

  ;; add MELPA archive to the list of available repositories
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "https://elpa.gnu.org/packages/") t)


  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t ; this adds ':ensure t' when using use-package
          use-package-expand-minimally t))

  ;; inhibit startup message
  (setq inhibit-startup-message t)
#+end_src

I don't like the behavior of =C-x C-b=, so this snippet modifies it so that listing buffers and choosing one opens it on the current frame.
#+begin_src emacs-lisp
  (defun my-list-buffers (&optional arg)
    "Display a list of existing buffers.
  The list is displayed in a buffer named \"*Buffer List*\".
  See `buffer-menu' for a description of the Buffer Menu.
  By default, all buffers are listed except those whose names start
  with a space (which are for internal use).  With prefix argument
  ARG, show only buffers that are visiting files."
    (interactive "P")
    (switch-to-buffer (list-buffers-noselect arg)))

  ;; bind the new function to C-b
  (define-key ctl-x-map "\C-b" 'my-list-buffers)
#+end_src

I only want to show line numbers in a /programming/ mode.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Resizing windows is counter intuitive, so I'd like up/down/left/right to resize the window in the concordant directions. Note that this may not work when in ~org-mode~ because that keybinding may be occupied with something else (I think for doing shift-selection).
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src

The default keybinding to switch to another window is =C-x o=, let's just make this shorter since I use it often.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src

Emacs will automatically create backup files in the same folder as the current directory, but this creates a lot of clutter, so let's just move all the files into a hidden folder
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/bak")))

  (setq auto-save-file-name-transforms
        '((".*" "~/.emacs.d/bak/autosaves" t)))
  (setq backup-by-copying t ; use copying to create backup files
        delete-old-versions t ; delete excess backup files
        kept-new-versions 4
        kept-old-versions 2
        version-control t)
#+end_src


I'd like to automatically insert a matching bracket pairs (or quotes, etc.).
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

* Convenient features

Evaluating the ~corfu~ package for auto-completion in Emacs (lisp).

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    :hook ((prog-mode . corfu-mode)
           (shell.mode . corfu-mode))
    :init
    (global-corfu-mode))

  (use-package emacs
    :init
    (setq tab-always-indent 'complete))
#+end_src

In terms of code folding we will use Emacs' =outline-minor-mode=, which is the same mechanism used in org-mode. Here I the outline mode is triggered by =M-S-o= keybinding, then use =a= or =h= to show or hide all. Each heading can be toggled to show/hide by the keybinding =M-S-<tab>=.
#+begin_src emacs-lisp
  ;; define custom function to trigger show/hide in 'outline-minor-mode'
  (defun de/toggle-hiding ()
    (interactive)
    (if outline-minor-mode
        (hs-toggle-hiding)))

  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (define-prefix-command 'cm-map nil "Outline-")
  ;; HIDE
  (define-key cm-map "h" 'hs-hide-all) ; hide all but headings
  ;; SHOW
  (define-key cm-map "a" 'hs-show-all) ; show all
  ;;  (define-key cm-map "t" 'hs-toggle-hiding) ; toggle hide/show
  (global-set-key (kbd "M-O") cm-map)

  (global-set-key (kbd "M-S-<tab>") 'de/toggle-hiding)
  #+end_src

* Custom functions

Make sure you have the folder and files present in the indicated path
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/Apps/emacs-init-file/custom") ; add `custom` to load-path
  (load "DE_fun01") ; search for file DE_fun01.el or DE_fun01.elc in load-path
#+end_src

I often use the function =fill-paragraph= to fit a paragraph according to the variable =fill-column=, but there's no convenient way to undo this operation. So here it is (taken from [[https://www.emacswiki.org/emacs/UnfillParagraph][Emacs wiki]]).
#+begin_src emacs-lisp
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  ;; Handy key definition
  (define-key global-map "\M-Q" 'unfill-paragraph)
#+end_src

* ~org-mode~ tweaks

#+begin_src emacs-lisp
  (setq org-startup-indented t ; use indentation
        ;; org-pretty-entities t ; toggle display of entities as utf-8 char
        org-startup-with-inline-images t) ; show inline images
#+end_src

A neat trick for when writing LaTeX snippets is the =C-c C-x C-l= keybinding to show/hide preview of latex. You enclose the expression with =\[= and =\]= or =$=.


* Bibliography or citations

#+begin_src emacs-lisp
  (use-package citeproc
    :after org)

  ;; for some reason, I dont need the line below on my Mac
  ;; but need it on Ubuntu 22.04 to avoid getting 'unknown processor csl' error
  ;; when exporting org files to pdf
  (require 'oc-csl)
#+end_src

To use =org-cite= (which should be built into Emacs) and =citeproc=, you just add both the options in your org file:
#+begin_example
#+BIBLIOGRAPHY: ./bib/citations.bib
#+CITE_EXPORT: csl ~/Zotero/styles/apa.csl 
#+end_example

The bibliography path can be relative but the path to the ~csl~ file must be a full-path. Then, to cite something from your bibliography. Invoke =org-cite-insert= or use the keybinding =C-c C-x @=. This way you don't really have to manage a single large monolithic ~bib~ file. Download various ~csl~ file from the Zotero github page.

To insert the formatted references in the exported document, add a =#+PRINT_BIBLIOGRAPHY:= directive where ever you want it to show up in the document.

* Additional packages

Show hidden emphasis markers until cursor over
#+begin_src emacs-lisp
  (use-package org-appear
    :ensure t; install package if not already present
    :after org
    :hook (org-mode . org-appear-mode))
#+end_src

Use mixed-pitch package to display variable-width and fixed-width fonts in org-mode
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    ;; use it in all text modes
    (text-mode . mixed-pitch-mode))
#+end_src

I also like to read pdf using Emacs, so install pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :pin manual ;; need to comment this out for initial setup
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights")
    )

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

#+end_src

I love the multi-cursor functionality in Sublime Text, so this package gives some of the features:
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-S-c C-S-c" . mc/edit-lines)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click))
    )
#+end_src

* Python setup

Trying the ~conda.el~ package. To use it =M-x conda-env-activate= to activate a
conda environment, and =conda-env-deactivate= to deactivate them. You can also use
=M-x conda-activate-for-buffer=.

#+begin_src emacs-lisp
  (use-package conda
    :defer t
    :init
    (setq conda-env-home-directory (expand-file-name "~/miniforge3"))
    (setq conda-env-subdirectory "envs")
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell))
#+end_src

The conda package is NOT for doing literate programming while in org-mode, but
it's a simple way to switch which python is called from within Emacs.
  
* ~org-babel~ languages

Active org-babel languages. Since I want to use jupyter kernels in org-mode, add =jupyter=.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (awk . t)
     (sed . t)
     (shell . t)
     (python . t)
     )
   )
#+end_src

To run ~ipython~ in org-babel, you need to include the option =:session :results
raw drawer= in the first cell. You can also include a =:kernel= option if executing
a code block from different ipython kernel. 

You can navigate between blocks via keybindings =C-c C-v n= (next block) or =C-c C-v p= (previous block).


