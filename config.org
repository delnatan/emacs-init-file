#+title: My Emacs configuration

In the ~~/.emacs.d/init.el~ file, all of the customizations added via the Emacs GUI (or Custom) is under =custom-set-variables= and =custom-set-faces=. Everything else will go under this org file to have a more thorough documentation.

* Basic settings

#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)
  
  ;; add MELPA archive to the list of available repositories
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "https://elpa.gnu.org/packages/") t)


  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t ; this adds ':ensure t' when using use-package
          use-package-expand-minimally t))

  ;; inhibit startup message
  (setq inhibit-startup-message t)
#+end_src

I don't like the behavior of =C-x C-b=, so this snippet modifies it so that
listing buffers and choosing one opens it on the current frame.

#+begin_src emacs-lisp
  (defun my-list-buffers (&optional arg)
    "Display a list of existing buffers.
  The list is displayed in a buffer named \"*Buffer List*\".
  See `buffer-menu' for a description of the Buffer Menu.
  By default, all buffers are listed except those whose names start
  with a space (which are for internal use).  With prefix argument
  ARG, show only buffers that are visiting files."
    (interactive "P")
    (switch-to-buffer (list-buffers-noselect arg)))

  ;; bind the new function to C-b
  (define-key ctl-x-map "\C-b" 'my-list-buffers)
  #+end_src

I only want to show line numbers in a /programming/ mode.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Resizing windows is counter intuitive, so I'd like up/down/left/right to resize the window in the concordant directions. Note that this may not work when in ~org-mode~ because that keybinding may be occupied with something else (I think for doing shift-selection).
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src

The default keybinding to switch to another window is =C-x o=, let's just make this shorter since I use it often.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src

Emacs will automatically create backup files in the same folder as the current directory, but this creates a lot of clutter, so let's just move all the files into a hidden folder
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/bak")))

  (setq auto-save-file-name-transforms
        '((".*" "~/.emacs.d/bak/autosaves" t)))
  (setq backup-by-copying t ; use copying to create backup files
        delete-old-versions t ; delete excess backup files
        kept-new-versions 4
        kept-old-versions 2
        version-control t)
#+end_src



* Custom functions

Make sure you have the folder and files present in the indicated path
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/custom") ; add `custom` to load-path
  (load "DE_fun01") ; search for file DE_fun01.el or DE_fun01.elc in load-path
#+end_src

* ~org-mode~ tweaks 

#+begin_src emacs-lisp
(setq org-startup-indented t ; use indentation
    org-pretty-entities t ; toggle display of entities as utf-8 char
    org-startup-with-inline-images t) ; show inline images
#+end_src

* Bibliography or citations

#+begin_src emacs-lisp
  (use-package citeproc
    :after org)

  ;; for some reason, I dont need the line below on my Mac
  ;; but need it on Ubuntu 22.04 to avoid getting 'unknown processor csl' error
  ;; when exporting org files to pdf
  (require 'oc-csl)
#+end_src

To use =org-cite= (which should be built into Emacs) and =citeproc=, you just add both the options in your org file:
#+begin_example
#+BIBLIOGRAPHY: ./bib/citations.bib
#+CITE_EXPORT: csl ~/Zotero/styles/apa.csl 
#+end_example

The bibliography path can be relative but the path to the ~csl~ file must be a full-path. Then, to cite something from your bibliography. Invoke =org-cite-insert= or use the keybinding =C-c C-x @=. This way you don't really have to manage a single large monolithic ~bib~ file. Download various ~csl~ file from the Zotero github page.

To insert the formatted references in the exported document, add a =#+PRINT_BIBLIOGRAPHY:= directive where ever you want it to show up in the document.

* Additional packages

Show hidden emphasis markers until cursor over
#+begin_src emacs-lisp
  (use-package org-appear
    :ensure t; install package if not already present
    :after org
    :hook (org-mode . org-appear-mode))
#+end_src

Use mixed-pitch package to display variable-width and fixed-width fonts in org-mode
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    ;; use it in all text modes
    (text-mode . mixed-pitch-mode))
#+end_src

I also like to read pdf using Emacs, so install pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :pin manual ;; need to comment this out for initial setup
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights")
    )

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

#+end_src

I love the multi-cursor functionality in Sublime Text, so this package gives some of the features:
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-S-c C-S-c" . mc/edit-lines)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click))
    )
#+end_src

* ~org-babel~ languages

Enable code execution in org-mode
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))
#+end_src
