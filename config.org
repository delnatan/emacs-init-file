#+title: My Emacs configuration

In the ~~/.emacs.d/init.el~ file, all of the customizations added via the Emacs GUI (or Custom) is under =custom-set-variables= and =custom-set-faces=. Everything else will go under this org file to have a more thorough documentation.

*Very helpful* shortcut while in /any/ mode is =C-h b=, which shows all of the keybindings in the current mode. Explore this if you're just learning to get familiar with various keybindings and discover new functions.

* Basic settings
When using macOS, use the command key as =meta=.
#+begin_src emacs-lisp
  (setq mac-command-modifier 'meta)
#+end_src

Initialize package management and use =use-package=.
#+begin_src emacs-lisp
  (require 'package)
  (package-initialize)

  ;; add MELPA archive to the list of available repositories
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("gnu" . "https://elpa.gnu.org/packages/") t)


  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t ; this adds ':ensure t' when using use-package
          use-package-expand-minimally t))

  ;; inhibit startup message
  (setq inhibit-startup-message t)

  ;; shorten the yes-or-no prompt to y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

I don't like the behavior of =C-x C-b=, so this snippet modifies it so that listing buffers and choosing one opens it on the current frame.
#+begin_src emacs-lisp
  (defun my-list-buffers (&optional arg)
    "Display a list of existing buffers.
  The list is displayed in a buffer named \"*Buffer List*\".
  See `buffer-menu' for a description of the Buffer Menu.
  By default, all buffers are listed except those whose names start
  with a space (which are for internal use).  With prefix argument
  ARG, show only buffers that are visiting files."
    (interactive "P")
    (switch-to-buffer (list-buffers-noselect arg)))

  ;; bind the new function to C-b
  (define-key ctl-x-map "\C-b" 'my-list-buffers)
#+end_src

I only want to show line numbers in a /programming/ mode.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

Resizing windows is counter intuitive, so I'd like up/down/left/right to resize the window in the concordant directions. Note that this may not work when in ~org-mode~ because that keybinding may be occupied with something else (I think for doing shift-selection).
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src

The default keybinding to switch to another window is =C-x o=, let's just make this shorter since I use it often.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src

Emacs will automatically create backup files in the same folder as the current directory, but this creates a lot of clutter, so let's just move all the files into a hidden folder
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/bak")))

  (setq auto-save-file-name-transforms
        '((".*" "~/.emacs.d/bak/autosaves" t)))
  (setq backup-by-copying t ; use copying to create backup files
        delete-old-versions t ; delete excess backup files
        kept-new-versions 4
        kept-old-versions 2
        version-control t)
#+end_src

I'd like to automatically insert a matching bracket pairs (or quotes, etc.).
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Custom themes

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+end_src

# I like =lambda-theme= so trying it out here:
# #+begin_src emacs-lisp
#   (use-package lambda-themes
#     :load-path ("~/Apps/emacs-init-file/themes/lambda-themes")
#     :custom
#     (lambda-themes-set-italic-comments t)
#     (lambda-themes-set-italic-keywords t)
#     (lambda-themes-set-variable-pitch t) 
#     :config
#     ;; load preferred theme 
#     (load-theme 'lambda-dark-faded t))
# #+end_src

Trying out =nano-theme= from Nicolas Rougier:
#+begin_src emacs-lisp
  (use-package nano-theme
    :load-path ("~/Apps/emacs-init-file/themes/nano-theme")
    :config
    (load-theme 'nano t)
    (nano-light))
#+end_src

Using Nicolas Rougier' ~nano-modeline~.
#+begin_src emacs-lisp
  (use-package nano-modeline
    :init
    (require 'nano-modeline)
    (nano-modeline-mode 1))
#+end_src

* Convenient features

Evaluating the ~corfu~ package for auto-completion in Emacs (lisp).

#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'auto-complete-mode)
    )
#+end_src

** Code folding (Python)

Trigger with =M-O=, use =h= to hide all, and =a= to show all.
Toggle show/hide by =M-S-<tab>=.

In terms of code folding we will use Emacs' =outline-minor-mode=, which is the same mechanism used in org-mode. 
#+begin_src emacs-lisp
  ;; define custom function to trigger show/hide in 'outline-minor-mode'
  (defun de/toggle-hiding ()
    (interactive)
    (if hs-minor-mode
        (hs-toggle-hiding)))

  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (define-prefix-command 'cm-map nil "Outline-")
  ;; HIDE
  (define-key cm-map "h" 'hs-hide-all) ; hide all but headings
  ;; SHOW
  (define-key cm-map "a" 'hs-show-all) ; show all
  ;;  (define-key cm-map "t" 'hs-toggle-hiding) ; toggle hide/show
  (global-set-key (kbd "M-O") cm-map)

  (global-set-key (kbd "M-S-<tab>") 'de/toggle-hiding)
#+end_src

** Window management

This little snippet will toggle window split between horizontal and vertical. Bound to =C-x |=.
#+begin_src emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-x |") 'toggle-window-split)
#+end_src

** =dired-sidebar= and customizations

With ~dired-sidebar~ package, too "jump" to file using =dired= as done by default with =C-x C-j=, do =C-u C-x C-n=. Here I've changed the function so that it works with ~dired-sidebar-mode~ rather than ~dired-mode~ (the normal dired buffer).

#+begin_src emacs-lisp
  ;; this was taken from https://www.emacswiki.org/emacs/DiredOmitMode
  (defun dired-dotfiles-toggle ()
    "Show/hide dot-files"
    (interactive)
    (when (equal major-mode 'dired-sidebar-mode)
      (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
          (progn 
            (set (make-local-variable 'dired-dotfiles-show-p) nil)
            (message "h")
            (dired-mark-files-regexp "^\\\.")
            (dired-do-kill-lines))
        (progn (revert-buffer) ; otherwise just revert to re-show
               (set (make-local-variable 'dired-dotfiles-show-p) t)))))

  (use-package dired-sidebar
    :bind (("C-x C-n" . dired-sidebar-toggle-sidebar)
           :map dired-mode-map
           ("<backtab>" . dired-dotfiles-toggle))
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))
    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
    (setq dired-sidebar-subtree-line-prefix "__"))

#+end_src

* Custom functions

Make sure you have the folder and files present in the indicated path
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/Apps/emacs-init-file/custom") ; add `custom` to load-path
  (load "DE_fun01") ; search for file DE_fun01.el or DE_fun01.elc in load-path
#+end_src

I often use the function =fill-paragraph= to fit a paragraph according to the variable =fill-column=, but there's no convenient way to undo this operation. So here it is (taken from [[https://www.emacswiki.org/emacs/UnfillParagraph][Emacs wiki]]).
#+begin_src emacs-lisp
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region)))

  ;; Handy key definition
  (define-key global-map "\M-Q" 'unfill-paragraph)
#+end_src

* ~org-mode~ customization
To tweak font settings in org-mode, you can use =M-x customize-face= and select for example ~org-level-1~. The ~src~ blocks in org-mode belongs to the group =org-block=.

#+begin_src emacs-lisp
  (setq org-startup-indented t) ; use indentation
  (setq org-confirm-babel-evaluate nil) ; skip y/n prompt when executing src block
  (setq org-hide-emphasis-markers t) ; hide emphasis marker
  (setq org-src-fontify-natively t) ; org syntax highlighting
  (setq org-fontify-whole-heading-line t)
  (setq org-format-latex-options
        '(:foreground default
                      :background default
                      :scale 1.4
                      :html-foreground "Black"
                      :html-background "Transparent"
                      :html-scale 1.0
                      :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
  (setq org-startup-with-inline-images t) ; show inline images

  ;; use fancy bullets in org-mode
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; enable variable pitch in org-mode
  ;; make sure you have the variable-pitch and fixed-pitch set in init.el
  (add-hook 'org-mode-hook 'variable-pitch-mode)

  ;; shortcut to insert a block of emacs-lisp/python code
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

A neat trick for when writing LaTeX snippets is the =C-c C-x C-l= keybinding to show/hide preview of latex. You enclose the expression with =\[= and =\]= or =$=.

* Bibliography or citations

#+begin_src emacs-lisp
  (use-package citeproc
    :after org)

  ;; for some reason, I dont need the line below on my Mac
  ;; but need it on Ubuntu 22.04 to avoid getting 'unknown processor csl' error
  ;; when exporting org files to pdf
  (require 'oc-csl)
#+end_src

To use =org-cite= (which should be built into Emacs) and =citeproc=, you just add both the options in your org file:
#+begin_example
#+BIBLIOGRAPHY: ./bib/citations.bib
#+CITE_EXPORT: csl ~/Zotero/styles/apa.csl 
#+end_example

The bibliography path can be relative but the path to the ~csl~ file must be a full-path. Then, to cite something from your bibliography. Invoke =org-cite-insert= or use the keybinding =C-c C-x @=. This way you don't really have to manage a single large monolithic ~bib~ file. The citation /style/ depends on the .csl file. Download various ~csl~ file from the Zotero github page.

To insert the formatted references in the exported document, add a =#+PRINT_BIBLIOGRAPHY:= directive where ever you want it to show up in the document.

* Additional packages

Show hidden emphasis markers until cursor over
#+begin_src emacs-lisp
  (use-package org-appear
    :ensure t; install package if not already present
    :after org
    :hook (org-mode . org-appear-mode))
#+end_src

I also like to read pdf using Emacs, so install pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :pin manual ;; need to comment this out for initial setup
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights")
    )

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

#+end_src

I love the multi-cursor functionality in Sublime Text, so this package gives some of the features:
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-S-c C-S-c" . mc/edit-lines)
           ("C-S-<mouse-1>" . mc/add-cursor-on-click))
    )
#+end_src

* Python setup

Trying the ~conda.el~ package. To use it =M-x conda-env-activate= to activate a conda environment, and =conda-env-deactivate= to deactivate them. You can also use =M-x conda-activate-for-buffer=.

#+begin_src emacs-lisp
  ;; custom function to kill current cell
  (defun de/kill-cell ()
    "code-cells mode custom function to kill current cell"
    (interactive)
    (let ((beg (car (code-cells--bounds)))
          (end (cadr (code-cells--bounds))))
      (kill-region beg end)))

  (defun de/restart-python ()
    "Clear current inferior python buffer and restart process"
    (interactive)
    (progn (with-current-buffer "*Python*" (comint-clear-buffer))
           (python-shell-restart)))

  (use-package code-cells
    :bind
    (:map code-cells-mode-map
          ("C-c d d" . de/kill-cell)
          ("C-c C-c" . code-cells-eval)
          ("C-c r p" . de/restart-python)
          ("M-p" . code-cells-backward-cell)
          ("M-n" . code-cells-forward-cell)
          ("M-<up>" . code-cells-move-cell-up)
          ("M-<down>" . code-cells-move-cell-down)))

  (use-package conda
    :defer t
    :init
    (setq conda-anaconda-home (expand-file-name "~/miniforge3"))
    (setq conda-env-subdirectory "envs")
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell))

  ;; attempt to turn any python file into code-cells
  ;; if it contains delimiters
  (add-hook 'python-mode-hook 'code-cells-mode-maybe)

  ;; automatically scroll to the bottom when sending to inferior process
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)

  ;; truncate lines in the output of inferior buffer
  (add-hook 'comint-mode-hook
            (lambda()
              (setq truncate-lines 1)))
#+end_src

The conda package is NOT for doing literate programming while in org-mode, but it's a simple way to switch which python is called from within Emacs.

I'm trying out the =code-cells= package to do lightweight jupyter-notebook-like experience in Emacs. The idea is that we can open a scratch python file (which sets Emacs in python-mode), then we can run =C-c C-p= a python process (ipython if =python-shell-interpreter= and =python-shell-interpreter-args= were configured as such).

I've added =C-c r p= to restart the ipython process. 
  
* ~org-babel~ languages

Active org-babel languages. Since I want to use jupyter kernels in org-mode, add =jupyter=.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (awk . t)
     (sed . t)
     (shell . t)
     (python . t)
     )
   )
#+end_src

To run ~ipython~ in org-babel, you need to include the option =:session :results
raw drawer= in the first cell. You can also include a =:kernel= option if executing
a code block from different ipython kernel. 

You can navigate between blocks via keybindings =C-c C-v n= (next block) or =C-c C-v p= (previous block).
